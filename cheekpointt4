{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "08047f3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "84\n"
     ]
    }
   ],
   "source": [
    "def maximum (a,b,c):\n",
    "    if a>=b and a>=c:\n",
    "        return (a)\n",
    "    elif b>=a and b>=c:\n",
    "        return (b)\n",
    "    else:\n",
    "        return (c)\n",
    "max=maximum(84,84,6)\n",
    "print(max)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c86e095b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(12, 2)\n"
     ]
    }
   ],
   "source": [
    "def calculation (x,y):\n",
    "   return (x+y, x-y)\n",
    "cal=calculation(7,5)\n",
    "print(cal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2fd96d1c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n"
     ]
    }
   ],
   "source": [
    "x= lambda x,y:x+y\n",
    "print(x(5,2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f4074b65",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "x= lambda x,y:x-y\n",
    "print(x(5,2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "741ef98e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def addition(l):\n",
    "    s=0\n",
    "    for i in l:\n",
    "        s=s+i\n",
    "    return s\n",
    "\n",
    "addition( [2,1,2,1,6])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1e826b93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "24"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def mult(l):\n",
    "    m=1\n",
    "    for i in l:\n",
    "        m=m*i\n",
    "    return m\n",
    "mult([2,1,2,1,6])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "4bd1c42e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 6)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def both(j):\n",
    "    p=[]\n",
    "    I=[]\n",
    "    for i in range(len(j)):\n",
    "        if i%2==0:\n",
    "            p.append(j[i])\n",
    "        elif i%2!=0:\n",
    "            I.append(j[i])\n",
    "    return addition(p),mult(I)\n",
    "both([2,3,1,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "86d68743",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "green-red-yellow-black-white\n",
      "black-green-red-white-yellow\n"
     ]
    }
   ],
   "source": [
    "i=[n for n in input().split('-')]\n",
    "i.sort()\n",
    "print('-'.join(i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea259cae",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6ee09c23",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
